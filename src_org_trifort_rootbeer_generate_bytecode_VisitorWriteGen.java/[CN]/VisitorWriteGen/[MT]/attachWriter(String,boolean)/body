{
  String specialization;
  if (ref_fields) {
    specialization="RefFields";
  }
 else {
    specialization="NonRefFields";
  }
  specialization+=JavaNameToOpenCL.convert(class_name) + OpenCLScene.v().getIdent();
  String visited_name=class_name + specialization;
  if (m_VisitedWriter.contains(visited_name))   return;
  m_VisitedWriter.add(visited_name);
  SootClass curr_class=Scene.v().getSootClass(class_name);
  SootClass parent=curr_class.getSuperclass();
  parent=Scene.v().getSootClass(parent.getName());
  if (parent.isApplicationClass()) {
    attachWriter(parent.getName(),ref_fields);
  }
  BytecodeLanguage bcl=new BytecodeLanguage();
  m_bcl.push(bcl);
  bcl.openClass(class_name);
  SootClass mem=Scene.v().getSootClass("org.trifort.rootbeer.runtime.Memory");
  bcl.startMethod("org_trifort_writeToHeap" + specialization,VoidType.v(),mem.getType(),m_gcObjVisitor.top().getType());
  m_CurrObj.push(bcl.refThis());
  m_CurrentMem.push(bcl.refParameter(0));
  m_gcObjVisitor.push(bcl.refParameter(1));
  m_ApplicationClass=true;
  SootClass soot_class=Scene.v().getSootClass(class_name);
  if (ref_fields) {
    ArrayType array=ArrayType.v(LongType.v(),1);
    m_Array=bcl.local(array);
    bcl.addFieldToClass(m_Array,"org_trifort_refs_array" + OpenCLScene.v().getIdent());
    Value array_instance=bcl.newArray(array,IntConstant.v(sizeRefsArray(soot_class)));
    bcl.assign(m_Array,array_instance);
    bcl.refInstanceFieldFromInput(m_CurrObj.top(),"org_trifort_refs_array" + OpenCLScene.v().getIdent(),m_Array);
  }
  doWriter(class_name,ref_fields,true);
  if (parent.getName().equals("java.lang.Object") == false) {
    if (parent.isApplicationClass()) {
      callBaseClassWriter(parent.getName(),ref_fields);
    }
 else {
      insertWriter(parent.getName(),ref_fields);
    }
  }
  bcl.returnVoid();
  bcl.endMethod();
  m_CurrObj.pop();
  m_CurrentMem.pop();
  m_gcObjVisitor.pop();
  if (ref_fields) {
    bcl.startMethod("org_trifort_writeRefs" + JavaNameToOpenCL.convert(class_name) + OpenCLScene.v().getIdent(),VoidType.v(),mem.getType());
    m_CurrObj.push(bcl.refThis());
    m_CurrentMem.push(bcl.refParameter(0));
    m_Array=bcl.refInstanceField(m_CurrObj.top(),"org_trifort_refs_array" + OpenCLScene.v().getIdent());
    BclMemory bcl_mem=new BclMemory(bcl,m_CurrentMem.top());
    for (int i=0; i < sizeRefsArray(soot_class); ++i) {
      Local ref=bcl.indexArray(m_Array,IntConstant.v(i));
      bcl_mem.writeRef(ref);
    }
    if (parent.isApplicationClass())     invokeWriteRefs(parent,m_CurrentMem.top());
    bcl.returnVoid();
    bcl.endMethod();
    m_CurrObj.pop();
    m_CurrentMem.pop();
  }
  m_bcl.pop();
}
