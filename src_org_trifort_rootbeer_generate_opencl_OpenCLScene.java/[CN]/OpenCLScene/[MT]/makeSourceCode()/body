{
  if (Configuration.compilerInstance().isManualCuda()) {
    String filename=Configuration.compilerInstance().getManualCudaFilename();
    String cuda_code=readCode(filename);
    String[] ret=new String[2];
    ret[0]=cuda_code;
    ret[1]=cuda_code;
    return ret;
  }
  m_usesGarbageCollector=false;
  List<NumberedType> types=RootbeerClassLoader.v().getDfsInfo().getNumberedTypes();
  writeTypesToFile(types);
  StringBuilder unix_code=new StringBuilder();
  StringBuilder windows_code=new StringBuilder();
  String method_protos=methodPrototypesString();
  String gc_string=garbageCollectorString();
  String bodies_string=methodBodiesString();
  unix_code.append(headerString(true));
  unix_code.append(method_protos);
  unix_code.append(gc_string);
  unix_code.append(bodies_string);
  unix_code.append(kernelString(true));
  windows_code.append(headerString(false));
  windows_code.append(method_protos);
  windows_code.append(gc_string);
  windows_code.append(bodies_string);
  windows_code.append(kernelString(false));
  String cuda_unix=setupEntryPoint(unix_code);
  String cuda_windows=setupEntryPoint(windows_code);
  PrintWriter writer=new PrintWriter(new FileWriter(RootbeerPaths.v().getRootbeerHome() + "generated_unix.cu"));
  writer.println(cuda_unix);
  writer.flush();
  writer.close();
  writer=new PrintWriter(new FileWriter(RootbeerPaths.v().getRootbeerHome() + "generated_windows.cu"));
  writer.println(cuda_windows);
  writer.flush();
  writer.close();
  NameMangling.v().writeTypesToFile();
  String[] ret=new String[2];
  ret[0]=cuda_unix;
  ret[1]=cuda_windows;
  return ret;
}
