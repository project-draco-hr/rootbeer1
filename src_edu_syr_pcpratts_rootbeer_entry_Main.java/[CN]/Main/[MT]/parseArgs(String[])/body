{
  m_num_args=args.length;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
    if (arg.equals("-nemu")) {
      m_mode=Configuration.MODE_NEMU;
    }
 else     if (arg.equals("-jemu")) {
      m_mode=Configuration.MODE_JEMU;
    }
 else     if (arg.equals("-remap-sparse")) {
      Configuration.compilerInstance().setRemapSparse();
    }
 else     if (arg.equals("-mainjar")) {
      m_mainJar=safeGet(args,i + 1,"-mainjar");
      ++i;
    }
 else     if (arg.equals("-libjar")) {
      String lib=safeGet(args,i + 1,"-libjar");
      m_libJars.add(lib);
      ++i;
    }
 else     if (arg.equals("-directory")) {
      String dir=safeGet(args,i + 1,"-directory");
      m_directories.add(dir);
      ++i;
    }
 else     if (arg.equals("-destjar")) {
      m_destJar=safeGet(args,i + 1,"-destjar");
      ++i;
    }
 else     if (arg.equals("-runtests")) {
      m_runTests=true;
      m_testCase=null;
      m_runHardTests=true;
    }
 else     if (arg.equals("-runeasytests")) {
      m_runTests=true;
      m_testCase=null;
      m_runHardTests=false;
    }
 else     if (arg.equals("-runtest")) {
      m_runTests=true;
      m_testCase=safeGet(args,i + 1,"-runtest");
      m_runHardTests=true;
      ++i;
    }
 else     if (arg.equals("-printdeviceinfo")) {
      m_printDeviceInfo=true;
    }
 else     if (arg.equals("-disable-class-remapping")) {
      m_disableClassRemapping=true;
    }
 else     if (arg.equals("-large-mem-tests")) {
      m_largeMemTests=true;
    }
 else     if (arg.equals("-maxrregcount")) {
      String count=safeGet(args,i + 1,"-maxrregcount");
      ++i;
      Configuration.compilerInstance().setMaxRegCount(Integer.parseInt(count));
    }
 else     if (arg.equals("-noarraychecks")) {
      Configuration.compilerInstance().setArrayChecks(false);
    }
 else     if (arg.equals("-nodoubles")) {
      Configuration.compilerInstance().setDoubles(false);
    }
 else     if (arg.equals("-norecursion")) {
      Configuration.compilerInstance().setRecursion(false);
    }
 else     if (arg.equals("-noexceptions")) {
      Configuration.compilerInstance().setExceptions(false);
    }
 else     if (m_simpleCompile == false) {
      m_mainJar=arg;
      m_destJar=safeGet(args,i + 1,arg);
      File main_jar=new File(m_mainJar);
      if (main_jar.exists() == false) {
        System.out.println("Cannot find: " + m_mainJar);
        System.exit(0);
      }
      ++i;
      m_simpleCompile=true;
    }
  }
  Configuration.compilerInstance().setMode(m_mode);
}
