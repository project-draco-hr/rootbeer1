{
  BytecodeLanguage bcl=m_bcl.top();
  SootClass obj_cls=Scene.v().getSootClass("java.lang.Object");
  bcl.startMethod("doReadFromHeap",obj_cls.getType(),obj_cls.getType(),BooleanType.v(),LongType.v());
  m_thisRef=bcl.refThis();
  m_gcObjVisitor.push(m_thisRef);
  m_param0=bcl.refParameter(0);
  m_objSerializing.push(m_param0);
  m_param1=bcl.refParameter(1);
  m_refParam=bcl.refParameter(2);
  m_mem=bcl.refInstanceField(m_thisRef,"mMem");
  m_textureMem=bcl.refInstanceField(m_thisRef,"mTextureMem");
  String dont_return_null_label=getNextLabel();
  bcl.ifStmt(m_refParam,"!=",LongConstant.v(-1),dont_return_null_label);
  bcl.returnValue(NullConstant.v());
  bcl.label(dont_return_null_label);
  Local mem=bcl.local(m_mem.getType());
  bcl.assign(mem,m_mem);
  m_currMem.push(mem);
  BclMemory bcl_mem=new BclMemory(m_bcl.top(),mem);
  bcl_mem.setAddress(m_refParam);
  bcl_mem.incrementAddress(3);
  Local ctor_used=bcl_mem.readByte();
  Local class_number=bcl_mem.readInt();
  ClassHierarchy class_hierarchy=RootbeerClassLoader.v().getClassHierarchy();
  Local ret;
  SootClass string_class=Scene.v().getSootClass("java.lang.String");
  RefType string_type=string_class.getType();
  String label=getNextLabel();
  long string_number=class_hierarchy.getNumberForType(string_type.toString());
  bcl.ifStmt(class_number,"!=",IntConstant.v((int)string_number),label);
  ret=makeReadFromHeapBodyForString(string_type);
  m_readFromHeapMethodsMade.put(string_type,ret);
  bcl.returnValue(ret);
  bcl.label(label);
  ArrayType array_type=ArrayType.v(CharType.v(),1);
  label=getNextLabel();
  long array_number=class_hierarchy.getNumberForType(array_type.toString());
  bcl.ifStmt(class_number,"!=",IntConstant.v((int)array_number),label);
  ret=makeReadFromHeapBodyForArrayType(array_type,ctor_used);
  m_readFromHeapMethodsMade.put(array_type,ret);
  bcl.returnValue(ret);
  bcl.label(label);
  String after_ctors_label=getNextLabel();
  bcl.ifStmt(ctor_used,"==",IntConstant.v(0),after_ctors_label);
  for (  Type type : m_orderedHistory) {
    makeCtorReadFromHeapMethodForType(type,false,class_number,ctor_used,after_ctors_label);
  }
  RefType obj=RefType.v("java.lang.Object");
  makeCtorReadFromHeapMethodForType(obj,true,class_number,ctor_used,after_ctors_label);
  bcl.label(after_ctors_label);
  for (  Type type : m_orderedHistory) {
    makeReadFromHeapMethodForType(type,false,ctor_used);
  }
  makeReadFromHeapMethodForType(obj,true,ctor_used);
  bcl.returnValue(NullConstant.v());
  bcl.endMethod();
}
