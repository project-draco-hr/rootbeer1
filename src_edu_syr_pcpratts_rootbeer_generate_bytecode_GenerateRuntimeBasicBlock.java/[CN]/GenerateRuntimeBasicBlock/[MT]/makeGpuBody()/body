{
  OpenCLScene.v().addCodeSegment(codeSegment);
  if (Configuration.compilerInstance().getMode() == Configuration.MODE_GPU) {
    CompileResult result=OpenCLScene.v().getCudaCode();
    if (result.getBinary() == null) {
      makeGetCodeMethodThatReturnsBytes(cubinFilename(false) + ".error");
      makeGetCodeMethodThatReturnsString("",true);
      makeGetCodeMethodThatReturnsString("",false);
    }
 else {
      List<byte[]> bytes=result.getBinary();
      writeBytesToFile(bytes,cubinFilename(true));
      makeGetCodeMethodThatReturnsBytes(cubinFilename(false));
      makeGetCodeMethodThatReturnsString("",true);
      makeGetCodeMethodThatReturnsString("",false);
    }
  }
 else {
    String[] code=OpenCLScene.v().getOpenCLCode();
    PrintWriter writer=new PrintWriter(RootbeerPaths.v().getRootbeerHome() + "pre_dead_unix.c");
    writer.println(code[0]);
    writer.flush();
    writer.close();
    writer=new PrintWriter(RootbeerPaths.v().getRootbeerHome() + "pre_dead_windows.c");
    writer.println(code[1]);
    writer.flush();
    writer.close();
    System.out.println("removing dead methods...");
    DeadMethods dead_methods=new DeadMethods("entry");
    code[0]=dead_methods.filter(code[0]);
    dead_methods=new DeadMethods("entry");
    code[1]=dead_methods.filter(code[1]);
    code[1]=code[1].replace("void entry ( char * gc_info_space ,","__declspec(dllexport)\nvoid entry ( char * gc_info_space ,");
    makeGetCodeMethodThatReturnsString(code[0],true);
    makeGetCodeMethodThatReturnsString(code[1],false);
    makeGetCodeMethodThatReturnsBytes("");
  }
}
