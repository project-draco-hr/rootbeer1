{
  String name="getCode";
  if (unix) {
    name+="Unix";
  }
 else {
    name+="Windows";
  }
  SootMethod getCode=new SootMethod(name,new ArrayList(),RefType.v("java.lang.String"),Modifier.PUBLIC);
  getCode.setDeclaringClass(mSootClass);
  mSootClass.addMethod(getCode);
  JimpleBody body=jimple.newBody(getCode);
  UnitAssembler assembler=new UnitAssembler();
  Local thislocal=jimple.newLocal("this0",mSootClass.getType());
  Unit thisid=jimple.newIdentityStmt(thislocal,jimple.newThisRef(mSootClass.getType()));
  assembler.add(thisid);
  SootClass string_builder_soot_class=Scene.v().getSootClass("java.lang.StringBuilder");
  Local r1=jimple.newLocal("r1",string_builder_soot_class.getType());
  Value r1_assign_rhs=jimple.newNewExpr(string_builder_soot_class.getType());
  Unit r1_assign=jimple.newAssignStmt(r1,r1_assign_rhs);
  assembler.add(r1_assign);
  SootMethod string_builder_ctor=string_builder_soot_class.getMethod("<init>",new ArrayList(),VoidType.v());
  Value r1_ctor=jimple.newSpecialInvokeExpr(r1,string_builder_ctor.makeRef(),new ArrayList());
  Unit r1_ctor_unit=jimple.newInvokeStmt(r1_ctor);
  assembler.add(r1_ctor_unit);
  Local r2=jimple.newLocal("r2",string_builder_soot_class.getType());
  Unit r2_assign_r1=jimple.newAssignStmt(r2,r1);
  assembler.add(r2_assign_r1);
  SootClass string_class=Scene.v().getSootClass("java.lang.String");
  List parameter_types=new ArrayList();
  parameter_types.add(string_class.getType());
  SootMethod string_builder_append=string_builder_soot_class.getMethod("append",parameter_types,string_builder_soot_class.getType());
  GpuCodeSplitter splitter=new GpuCodeSplitter();
  List<String> blocks=splitter.split(gpu_code);
  for (  String block : blocks) {
    Value curr_string_constant=StringConstant.v(block);
    List args=new ArrayList();
    args.add(curr_string_constant);
    Value invoke_expr=jimple.newVirtualInvokeExpr(r2,string_builder_append.makeRef(),args);
    Unit invoke_stmt=jimple.newInvokeStmt(invoke_expr);
    assembler.add(invoke_stmt);
  }
  Local r5=jimple.newLocal("r5",string_class.getType());
  SootMethod to_string=string_builder_soot_class.getMethod("java.lang.String toString()");
  Value r5_rhs=jimple.newVirtualInvokeExpr(r2,to_string.makeRef());
  Unit r5_assign=jimple.newAssignStmt(r5,r5_rhs);
  assembler.add(r5_assign);
  assembler.add(jimple.newReturnStmt(r5));
  assembler.assemble(body);
  getCode.setActiveBody(body);
}
