{
  boolean single_result=false;
switch (compileArch) {
case Arch32bit:
    System.out.println("compiling CUDA code for 32bit only...");
  m_toCores.put(new ParallelCompileJob(generated,cuda_path,gencode_options,true));
single_result=true;
break;
case Arch64bit:
System.out.println("compiling CUDA code for 64bit only...");
m_toCores.put(new ParallelCompileJob(generated,cuda_path,gencode_options,false));
single_result=true;
break;
case Arch32bit64bit:
System.out.println("compiling CUDA code for 32bit and 64bit...");
m_toCores.put(new ParallelCompileJob(generated,cuda_path,gencode_options,true));
m_toCores.put(new ParallelCompileJob(generated,cuda_path,gencode_options,false));
single_result=false;
break;
}
if (single_result) {
ParallelCompileJob job=m_fromCores.take();
CompileResult result=job.getResult();
CompileResult[] ret=new CompileResult[1];
ret[0]=result;
return ret;
}
 else {
ParallelCompileJob ret1=m_fromCores.take();
ParallelCompileJob ret2=m_fromCores.take();
CompileResult[] ret=new CompileResult[2];
if (ret1.getResult().is32Bit()) {
ret[0]=ret1.getResult();
ret[1]=ret2.getResult();
}
 else {
ret[0]=ret2.getResult();
ret[1]=ret1.getResult();
}
return ret;
}
}
