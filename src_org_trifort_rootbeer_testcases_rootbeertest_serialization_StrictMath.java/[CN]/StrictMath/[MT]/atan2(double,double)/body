{
  if (x != x || y != y)   return Double.NaN;
  if (x == 1)   return atan(y);
  if (x == Double.POSITIVE_INFINITY) {
    if (y == Double.POSITIVE_INFINITY)     return PI / 4;
    if (y == Double.NEGATIVE_INFINITY)     return -PI / 4;
    return 0 * y;
  }
  if (x == Double.NEGATIVE_INFINITY) {
    if (y == Double.POSITIVE_INFINITY)     return 3 * PI / 4;
    if (y == Double.NEGATIVE_INFINITY)     return -3 * PI / 4;
    return (1 / (0 * y) == Double.POSITIVE_INFINITY) ? PI : -PI;
  }
  if (y == 0) {
    if (1 / (0 * x) == Double.POSITIVE_INFINITY)     return y;
    return (1 / y == Double.POSITIVE_INFINITY) ? PI : -PI;
  }
  if (y == Double.POSITIVE_INFINITY || y == Double.NEGATIVE_INFINITY || x == 0)   return y < 0 ? -PI / 2 : PI / 2;
  double z=abs(y / x);
  if (z > TWO_60)   z=PI / 2 + 0.5 * PI_L;
 else   if (x < 0 && z < 1 / TWO_60)   z=0;
 else   z=atan(z);
  if (x > 0)   return y > 0 ? z : -z;
  return y > 0 ? PI - (z - PI_L) : z - PI_L - PI;
}
