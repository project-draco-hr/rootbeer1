{
  boolean negative=x < 0;
  x=abs(x);
  double z;
  int n;
  if (x < 3 * PI / 4) {
    z=x - PIO2_1;
    if ((float)x != (float)(PI / 2)) {
      y[0]=z - PIO2_1L;
      y[1]=z - y[0] - PIO2_1L;
    }
 else {
      z-=PIO2_2;
      y[0]=z - PIO2_2L;
      y[1]=z - y[0] - PIO2_2L;
    }
    n=1;
  }
 else   if (x <= TWO_20 * PI / 2) {
    n=(int)(2 / PI * x + 0.5);
    z=x - n * PIO2_1;
    double w=n * PIO2_1L;
    y[0]=z - w;
    if (n >= 32 || (float)x == (float)(w)) {
      if (x / y[0] >= TWO_16) {
        double t=z;
        w=n * PIO2_2;
        z=t - w;
        w=n * PIO2_2L - (t - z - w);
        y[0]=z - w;
        if (x / y[0] >= TWO_49) {
          t=z;
          w=n * PIO2_3;
          z=t - w;
          w=n * PIO2_3L - (t - z - w);
          y[0]=z - w;
        }
      }
    }
    y[1]=z - y[0] - w;
  }
 else {
    int e0=(int)(Double.doubleToLongBits(x) >> 52) - 1046;
    z=scale(x,-e0);
    double[] tx=new double[3];
    for (int i=0; i < 2; i++) {
      tx[i]=(int)z;
      z=(z - tx[i]) * TWO_24;
    }
    tx[2]=z;
    int nx=2;
    while (tx[nx] == 0)     nx--;
    n=remPiOver2(tx,y,e0,nx);
  }
  if (negative) {
    y[0]=-y[0];
    y[1]=-y[1];
    return -n;
  }
  return n;
}
