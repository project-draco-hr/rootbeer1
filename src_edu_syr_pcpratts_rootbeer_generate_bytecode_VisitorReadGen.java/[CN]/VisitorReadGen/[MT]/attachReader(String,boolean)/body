{
  String specialization;
  if (ref_fields) {
    specialization="RefFields";
  }
 else {
    specialization="NonRefFields";
  }
  specialization+=JavaNameToOpenCL.convert(class_name);
  specialization+=OpenCLScene.v().getIdent();
  String visited_name=class_name + specialization;
  if (m_VisitedReader.contains(visited_name))   return;
  m_VisitedReader.add(visited_name);
  SootClass curr_class=Scene.v().getSootClass(class_name);
  SootClass parent=curr_class.getSuperclass();
  parent=Scene.v().getSootClass(parent.getName());
  if (FastWholeProgram.v().isApplicationClass(parent)) {
    attachReader(parent.getName(),ref_fields);
  }
  BytecodeLanguage bcl=new BytecodeLanguage();
  Local gc_obj_visit=m_gcObjVisitor.top();
  m_bcl.push(bcl);
  bcl.openClass(class_name);
  SootClass mem=Scene.v().getSootClass("edu.syr.pcpratts.rootbeer.runtime.memory.Memory");
  bcl.startMethod("edu_syr_pcpratts_readFromHeap" + specialization,VoidType.v(),mem.getType(),gc_obj_visit.getType());
  m_ObjSerializing.push(bcl.refThis());
  m_currMem.push(bcl.refParameter(0));
  m_gcObjVisitor.push(bcl.refParameter(1));
  doReader(class_name,ref_fields);
  if (parent.getName().equals("java.lang.Object") == false) {
    if (FastWholeProgram.v().isApplicationClass(parent)) {
      callBaseClassReader(parent.getName(),ref_fields);
    }
 else {
      insertReader(parent.getName(),ref_fields);
    }
  }
  bcl.returnVoid();
  bcl.endMethod();
  m_ObjSerializing.pop();
  m_currMem.pop();
  m_gcObjVisitor.pop();
  m_bcl.pop();
}
