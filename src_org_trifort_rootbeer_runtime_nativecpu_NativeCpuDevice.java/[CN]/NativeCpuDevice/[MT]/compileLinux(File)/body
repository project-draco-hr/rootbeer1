{
  String nemu=nemu_file.getAbsolutePath() + File.separator;
  String name="libnemu";
  int status;
  String cmd;
  Process p;
  if (m_nativeCpuInitialized == false) {
    cmd="gcc -ggdb -Wall -fPIC -g -c -I/usr/lib/jvm/default-java/include/ -I/usr/lib/jvm/default-java/include/linux " + nemu + "NativeCpuDevice.c -o "+ nemu+ "NativeCpuDevice.o";
    p=Runtime.getRuntime().exec(cmd,null,nemu_file);
    status=p.waitFor();
    if (status != 0) {
      System.out.println("Compilation failure!");
      System.out.println(cmd);
      System.exit(-1);
    }
    p.destroy();
  }
  cmd="gcc -ggdb -fPIC -Wall -g -c -lpthread " + nemu + "generated.c -o "+ nemu+ "generated.o";
  p=Runtime.getRuntime().exec(cmd,null,nemu_file);
  status=p.waitFor();
  if (status != 0) {
    System.out.println("Compilation failure!");
    System.out.println(cmd);
    System.exit(-1);
  }
  p.destroy();
  cmd="gcc -shared -Wl,-soname," + name + " -o "+ nemu+ name+ ".so.1 "+ nemu+ "generated.o -lc";
  p=Runtime.getRuntime().exec(cmd,null,nemu_file);
  status=p.waitFor();
  if (status != 0) {
    System.out.println("Compilation failure!");
    System.out.println(cmd);
    System.exit(-1);
  }
  p.destroy();
  if (m_nativeCpuInitialized == false) {
    cmd="gcc -shared -Wl,-soname,nativecpudev -o " + nemu + "nativecpudev.so.1 "+ nemu+ "NativeCpuDevice.o "+ nemu+ "generated.o -lc";
    p=Runtime.getRuntime().exec(cmd,null,nemu_file);
    status=p.waitFor();
    if (status != 0) {
      System.out.println("Compilation failure!");
      System.out.println(cmd);
      System.exit(-1);
    }
    p.destroy();
  }
  if (m_nativeCpuInitialized == false) {
    File f1=new File(nemu + "nativecpudev.so.1");
    System.load(f1.getAbsolutePath());
    m_nativeCpuInitialized=true;
  }
  File f2=new File(nemu + name + ".so.1");
  return f2.getAbsolutePath();
}
