{
  m_dontMangleMethods=new HashSet<String>();
  m_emitUnmangled=new HashSet<String>();
  m_dontMangleMethods.add("<java.lang.StrictMath: double exp(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double log(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double log10(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double log(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double sqrt(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double cbrt(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double IEEEremainder(double,double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double ceil(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double floor(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double sin(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double cos(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double tan(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double asin(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double acos(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double atan(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double atan2(double,double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double pow(double,double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double sinh(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double cosh(double)>");
  m_dontMangleMethods.add("<java.lang.StrictMath: double tanh(double)>");
  m_dontMangleMethods.add("<java.lang.Double: long doubleToLongBits(double)>");
  m_dontMangleMethods.add("<java.lang.Double: double longBitsToDouble(long)>");
  m_dontMangleMethods.add("<java.lang.Float: int floatToIntBits(float)>");
  m_dontMangleMethods.add("<java.lang.Float: float intBitsToFloat(int)>");
  m_dontMangleMethods.add("<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>");
  m_dontMangleMethods.add("<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>");
  m_dontMangleMethods.add("<java.lang.Throwable: int getStackTraceDepth()>");
  m_dontMangleMethods.add("<java.lang.Throwable: java.lang.StackTraceElement getStackTraceElement(int)>");
  m_dontMangleMethods.add("<java.lang.Object: java.lang.Object clone()>");
  m_dontMangleMethods.add("<java.lang.Object: int hashCode()>");
  m_dontMangleMethods.add("<java.lang.OutOfMemoryError: void <init>()>");
  m_dontMangleMethods.add("<edu.syr.pcpratts.rootbeer.runtime.RootbeerGpu: boolean isOnGpu()>");
  m_dontMangleMethods.add("<edu.syr.pcpratts.rootbeer.runtime.RootbeerGpu: int getThreadId()>");
  m_dontMangleMethods.add("<edu.syr.pcpratts.rootbeer.runtime.RootbeerGpu: long getRef(java.lang.Object)>");
  m_dontMangleMethods.add("<edu.syr.pcpratts.rootbeer.runtime.RootbeerGpu: void synchthreads()>");
  m_dontMangleMethods.add("<java.lang.System: long nanoTime()>");
  m_dontMangleMethods.add("<java.lang.Class: java.lang.String getName()>");
  m_dontMangleMethods.add("<java.lang.Object: java.lang.Class getClass()>");
  m_dontMangleMethods.add("<java.lang.StringValue: char[] from(char[])");
  m_dontMangleMethods.add("<java.lang.String: void <init>(char[])>");
  m_emitUnmangled.add("<java.lang.String: void <init>(char[])>");
}
