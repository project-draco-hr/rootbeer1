{
  int num_blocks=num_items;
  int max_blocks=getMaxThreads(num_processors);
  if (num_blocks == max_blocks) {
    m_GridShape=(int)num_processors * m_MaxBlocksPerProc;
    m_BlockShape=m_MaxThreadsPerBlock;
  }
 else   if (num_blocks < num_processors) {
    m_GridShape=num_blocks;
    m_BlockShape=1;
  }
 else {
    int min_score=Integer.MAX_VALUE;
    for (int block_shape=1; block_shape <= m_MaxThreadsPerBlock; ++block_shape) {
      for (int grid_shape=1; grid_shape <= num_processors * m_MaxBlocksPerProc; ++grid_shape) {
        int score=m_MaxThreadsPerBlock - block_shape;
        if (grid_shape == num_processors) {
          score-=500;
        }
        if (grid_shape * block_shape < num_blocks + m_MaxThreadsPerBlock && grid_shape * block_shape >= num_blocks) {
          score-=1000;
          score-=m_MaxThreadsPerBlock - ((grid_shape * block_shape) - num_blocks);
        }
        if (score < min_score) {
          min_score=score;
          m_BlockShape=block_shape;
          m_GridShape=grid_shape;
        }
      }
    }
  }
}
