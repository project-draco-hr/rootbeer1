{
  int block_idxx=RootbeerGpu.getBlockIdxx();
  int thread_idxx=RootbeerGpu.getThreadIdxx();
  int bc_columns=m_blockSize * m_gridSize;
  int a_columns=m_blockSize;
  int thread_row=thread_idxx / 32;
  int thread_col=thread_idxx % 32;
  int[] a=m_a;
  int[] b=m_b;
  int[] c=m_c;
  for (int sub_matrix=0; sub_matrix < 4; ++sub_matrix) {
    int sum=0;
    for (int m=0; m < 2; ++m) {
      int a_src_row=thread_row;
      int a_src_col=m * 32 + thread_col;
      int a_src=a_src_row * a_columns + a_src_col;
      int b_src_row=m * 32 + thread_row;
      int b_src_col=thread_col;
      int b_src=b_src_row * bc_columns + b_src_col;
      float a_value=a[a_src];
      float b_value=b[b_src];
      RootbeerGpu.setSharedFloat(thread_idxx,a_value);
      RootbeerGpu.setSharedFloat(64 * 64 + thread_idxx,b_value);
      RootbeerGpu.synchthreads();
      for (int k=0; k < 32; ++k) {
        a_value=RootbeerGpu.getSharedFloat(thread_row * 64 + k);
        b_value=RootbeerGpu.getSharedFloat(64 * 64 + thread_col * 64 + k);
        a_value=2;
        b_value=2;
        sum+=a_value * b_value;
      }
      RootbeerGpu.synchthreads();
    }
    int dest_index=block_idxx * m_blockSize * m_blockSize + (1024 * sub_matrix) + thread_idxx;
    c[dest_index]+=sum;
  }
}
