{
  m_usingKernelTemplates=false;
  m_runStopwatch.start();
  CompiledKernel compiled_kernel=(CompiledKernel)work.get(0);
  String filename;
  if (m_32bit) {
    filename=compiled_kernel.getCubin32();
  }
 else {
    filename=compiled_kernel.getCubin64();
  }
  if (filename.endsWith(".error")) {
    throw new RuntimeException("CUDA code compiled with error");
  }
  byte[] cubin_file;
  if (m_cubinFiles.containsKey(filename)) {
    cubin_file=m_cubinFiles.get(filename);
  }
 else {
    cubin_file=readCubinFile(filename);
    m_cubinFiles.put(filename,cubin_file);
  }
  if (m_usingUncheckedMemory) {
    m_handlesMemory=new FixedMemory(4);
    m_exceptionsMemory=new FixedMemory(getExceptionsMemSize(thread_config));
    m_classMemory=new FixedMemory(1024);
  }
 else {
    m_handlesMemory=new CheckedFixedMemory(4);
    m_exceptionsMemory=new CheckedFixedMemory(getExceptionsMemSize(thread_config));
    m_classMemory=new CheckedFixedMemory(1024);
  }
  if (m_objectMemory == null) {
    init();
  }
  writeBlocks(work);
  runBlocks(thread_config,cubin_file);
  readBlocks(work);
  m_runStopwatch.stop();
  m_overallTime=m_runStopwatch.elapsedTimeMillis();
  m_stats.add(new StatsRow(m_serializationTime,m_executionTime,m_deserializationTime,m_overallTime,thread_config.getGridShapeX(),thread_config.getBlockShapeX()));
}
