{
  m_readBlocksStopwatch.start();
  m_objectMemory.setAddress(0);
  m_handlesMemory.setAddress(0);
  m_exceptionsMemory.setAddress(0);
  CompiledKernel compiled_kernel=(CompiledKernel)work.get(0);
  Serializer serializer=compiled_kernel.getSerializer(m_objectMemory,m_textureMemory);
  if (Configuration.runtimeInstance().getExceptions()) {
    for (int i=0; i < work.size(); ++i) {
      long ref=m_exceptionsMemory.readRef();
      if (ref != 0) {
        long ref_num=ref >> 4;
        if (ref_num == compiled_kernel.getNullPointerNumber()) {
          throw new NullPointerException();
        }
 else         if (ref_num == compiled_kernel.getOutOfMemoryNumber()) {
          throw new OutOfMemoryError();
        }
        m_objectMemory.setAddress(ref);
        Object except=serializer.readFromHeap(null,true,ref);
        if (except instanceof Error) {
          Error except_th=(Error)except;
          throw except_th;
        }
 else         if (except instanceof GpuException) {
          GpuException gpu_except=(GpuException)except;
          throw new ArrayIndexOutOfBoundsException("array_index: " + gpu_except.m_arrayIndex + " array_length: "+ gpu_except.m_arrayLength+ " array: "+ gpu_except.m_array);
        }
 else {
          throw new RuntimeException((Throwable)except);
        }
      }
    }
  }
  serializer.readStaticsFromHeap();
  for (  Kernel kernel : work) {
    long handle=m_handles.get(kernel);
    serializer.readFromHeap(kernel,true,handle);
  }
  if (Configuration.getPrintMem()) {
    BufferPrinter printer=new BufferPrinter();
    printer.print(m_objectMemory,0,256);
  }
  m_readBlocksStopwatch.stop();
  m_deserializationTime=m_readBlocksStopwatch.elapsedTimeMillis();
}
