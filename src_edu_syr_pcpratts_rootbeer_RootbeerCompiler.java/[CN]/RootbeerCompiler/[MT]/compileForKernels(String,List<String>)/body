{
  String[] sorted=new String[kernel_classes.size()];
  sorted=kernel_classes.toArray(sorted);
  Arrays.sort(sorted);
  kernel_classes.clear();
  for (  String cls : sorted) {
    kernel_classes.add(cls);
  }
  Map<String,List<String>> reachables=new HashMap<String,List<String>>();
  Map<String,List<String>> forward_reachables=new HashMap<String,List<String>>();
  List<String> all_reachables=new ArrayList<String>();
  for (  String kernel : kernel_classes) {
    SootClass soot_class=Scene.v().getSootClass(kernel);
    SootMethod kernel_method=soot_class.getMethod("void gpuMethod()");
    FastWholeProgram.v().getDfsMethods(kernel_method);
    System.out.println("finding kernel reachable methods for: " + soot_class.getShortName() + "...");
    KernelReachableMethods reachable_finder=new KernelReachableMethods();
    List<String> curr_reachables=reachable_finder.get(kernel);
    forward_reachables.put(kernel,reachable_finder.getForward());
    all_reachables.addAll(curr_reachables);
    reachables.put(kernel,curr_reachables);
  }
  ClassRemappingTransform transform=null;
  if (!Main.disable_class_remapping()) {
    System.out.println("remapping some classes to GPU versions...");
    Iterator<String> iter=reachables.keySet().iterator();
    while (iter.hasNext()) {
      List<String> curr_reachables=reachables.get(iter.next());
      transform=new ClassRemappingTransform(false);
      transform.run(curr_reachables);
      transform.finishClone();
    }
  }
  reachables=new HashMap<String,List<String>>();
  forward_reachables=new HashMap<String,List<String>>();
  all_reachables=new ArrayList<String>();
  for (  String kernel : kernel_classes) {
    SootClass soot_class=Scene.v().getSootClass(kernel);
    SootMethod kernel_method=soot_class.getMethod("void gpuMethod()");
    FastWholeProgram.v().getDfsMethods(kernel_method);
    System.out.println("finding kernel reachable methods for: " + soot_class.getShortName() + "...");
    KernelReachableMethods reachable_finder=new KernelReachableMethods();
    List<String> curr_reachables=reachable_finder.get(kernel);
    forward_reachables.put(kernel,reachable_finder.getForward());
    all_reachables.addAll(curr_reachables);
    reachables.put(kernel,curr_reachables);
  }
  Transform2 transform2=new Transform2();
  for (  String cls : kernel_classes) {
    List<String> curr_reachables=reachables.get(cls);
    RootbeerScene.v().setReachableMethods(curr_reachables);
    RootbeerScene.v().setForwardReachables(forward_reachables.get(cls));
    SootClass soot_class=Scene.v().getSootClass(cls);
    SootMethod kernel_method=soot_class.getMethod("void gpuMethod()");
    FastWholeProgram.v().getDfsMethods(kernel_method);
    transform2.run(cls);
  }
  Set<String> app_classes=new HashSet<String>();
  if (!Main.disable_class_remapping()) {
    app_classes.addAll(transform.getModifiedClasses());
  }
  SignatureUtil util=new SignatureUtil();
  for (  String method_sig : all_reachables) {
    String class_name=util.classFromMethodSig(method_sig);
    if (app_classes.contains(class_name) == false) {
      app_classes.add(class_name);
    }
  }
  for (  String cls : app_classes) {
    loadAllMethods(cls);
    writeClassFile(cls);
    writeJimpleFile(cls);
  }
  List<String> added_classes=RootbeerScene.v().getAddedClasses();
  for (  String cls : added_classes) {
    loadAllMethods(cls);
    writeClassFile(cls);
    writeJimpleFile(cls);
  }
  makeOutJar();
  pack(outname);
}
