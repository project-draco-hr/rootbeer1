{
  if (kernel_classes.isEmpty()) {
    System.out.println("There are no kernel classes. Please implement the following interface to use rootbeer:");
    System.out.println("edu.syr.pcpratts.rootbeer.runtime.Kernel");
    System.exit(0);
  }
  String[] sorted=new String[kernel_classes.size()];
  for (int i=0; i < kernel_classes.size(); ++i) {
    sorted[i]=kernel_classes.get(i).getName();
  }
  Arrays.sort(sorted);
  kernel_classes.clear();
  for (  String cls : sorted) {
    kernel_classes.add(Scene.v().getSootClass(cls));
  }
  for (  SootClass kernel : kernel_classes) {
    SootMethod kernel_method=kernel.getMethod("void gpuMethod()");
    FastWholeProgram.v().fullyLoad(kernel_method,true,m_disableClassRemapping);
  }
  ClassRemappingTransform transform=null;
  if (m_disableClassRemapping=false) {
    System.out.println("remapping some classes to GPU versions...");
    for (    SootClass kernel : kernel_classes) {
      SootMethod kernel_method=kernel.getMethod("void gpuMethod()");
      DfsInfo info=FastWholeProgram.v().getDfsInfo(kernel_method);
      RootbeerScene.v().setDfsInfo(info);
      List<String> sigs=info.getReachableMethodSigs();
      transform=new ClassRemappingTransform(false);
      transform.run(sigs);
      transform.finishClone();
      FastWholeProgram.v().fullyLoad(kernel_method,false,m_disableClassRemapping);
      info=FastWholeProgram.v().getDfsInfo(kernel_method);
      info.setModifiedClasses(transform.getModifiedClasses());
    }
  }
  Transform2 transform2=new Transform2();
  for (  SootClass soot_class : kernel_classes) {
    SootMethod kernel_method=soot_class.getMethod("void gpuMethod()");
    DfsInfo info=FastWholeProgram.v().getDfsInfo(kernel_method);
    RootbeerScene.v().setDfsInfo(info);
    transform2.run(soot_class.getName());
  }
  System.out.println("writing classes out...");
  if (m_disableClassRemapping) {
    for (    SootClass kernel : kernel_classes) {
      SootMethod kernel_method=kernel.getMethod("void gpuMethod()");
      DfsInfo info=FastWholeProgram.v().getDfsInfo(kernel_method);
      Set<String> modified=info.getModifiedClasses();
      if (modified == null) {
        continue;
      }
      for (      String cls : modified) {
        loadAllMethods(cls);
        writeClassFile(cls);
        writeJimpleFile(cls);
      }
    }
  }
  List<String> app_classes=FastWholeProgram.v().getApplicationClasses();
  for (  String app_class : app_classes) {
    loadAllMethods(app_class);
    writeClassFile(app_class);
    writeJimpleFile(app_class);
  }
  List<String> added_classes=RootbeerScene.v().getAddedClasses();
  for (  String cls : added_classes) {
    loadAllMethods(cls);
    writeClassFile(cls);
    writeJimpleFile(cls);
  }
  makeOutJar();
  pack(outname);
}
