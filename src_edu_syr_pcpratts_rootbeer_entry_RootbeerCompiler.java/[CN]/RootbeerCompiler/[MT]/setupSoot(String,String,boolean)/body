{
  RootbeerClassLoader.v().setUserJar(jar_filename);
  extractJar(jar_filename);
  List<String> proc_dir=new ArrayList<String>();
  proc_dir.add(RootbeerPaths.v().getJarContentsFolder());
  Options.v().set_allow_phantom_refs(true);
  Options.v().set_rbclassload(true);
  Options.v().set_prepend_classpath(true);
  Options.v().set_process_dir(proc_dir);
  if (m_enableClassRemapping) {
    Options.v().set_rbclassload_buildcg(true);
  }
  if (rootbeer_jar.equals("") == false) {
    Options.v().set_soot_classpath(rootbeer_jar);
  }
  Options.v().set_rbcl_remap_all(false);
  Options.v().set_rbcl_remap_prefix("edu.syr.pcpratts.rootbeer.runtime.remap.");
  RootbeerClassLoader.v().addEntryPointDetector(m_entryDetector);
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.compressor.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.deadmethods.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.jpp.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.rootbeer.compiler.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.rootbeer.configuration.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.rootbeer.entry.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.rootbeer.generate.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.rootbeer.test.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.rootbeer.testcases.");
  RootbeerClassLoader.v().addIgnorePackage("edu.syr.pcpratts.rootbeer.util.");
  RootbeerClassLoader.v().addIgnorePackage("pack.");
  RootbeerClassLoader.v().addIgnorePackage("jasmin.");
  RootbeerClassLoader.v().addIgnorePackage("soot.");
  RootbeerClassLoader.v().addIgnorePackage("beaver.");
  RootbeerClassLoader.v().addIgnorePackage("polyglot.");
  RootbeerClassLoader.v().addIgnorePackage("org.antlr.");
  RootbeerClassLoader.v().addIgnorePackage("java_cup.");
  RootbeerClassLoader.v().addIgnorePackage("ppg.");
  RootbeerClassLoader.v().addIgnorePackage("antlr.");
  RootbeerClassLoader.v().addIgnorePackage("jas.");
  RootbeerClassLoader.v().addIgnorePackage("scm.");
  RootbeerClassLoader.v().addIgnorePackage("org.xmlpull.v1.");
  RootbeerClassLoader.v().addIgnorePackage("android.util.");
  RootbeerClassLoader.v().addIgnorePackage("android.content.res.");
  RootbeerClassLoader.v().addIgnorePackage("org.apache.commons.codec.");
  if (runtests) {
    RootbeerClassLoader.v().addTestCasePackage("edu.syr.pcpratts.rootbeer.testcases.");
  }
  RootbeerClassLoader.v().addKeepPackages("edu.syr.pcpratts.rootbeer.runtime2.");
  RootbeerClassLoader.v().addKeepPackages("edu.syr.pcpratts.rootbeer.configuration.");
  for (  String runtime_class : m_runtimeClasses) {
    RootbeerClassLoader.v().addSignaturesClass(runtime_class);
  }
  RootbeerClassLoader.v().addNewInvoke("java.lang.StringBuilder");
  RootbeerClassLoader.v().addFollowSignature("<java.lang.StringBuilder: void <init>()>");
  RootbeerClassLoader.v().addFollowSignature("<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>");
  RootbeerClassLoader.v().addFollowSignature("java.lang.StringBuilder: java.lang.String toString()>");
  RootbeerClassLoader.v().addFollowSignature("<edu.syr.pcpratts.rootbeer.runtime.Sentinal: void <init>()>");
  RootbeerClassLoader.v().addFollowSignature("<edu.syr.pcpratts.rootbeer.runtimegpu.GpuException: edu.syr.pcpratts.rootbeer.runtimegpu.GpuException arrayOutOfBounds(int,int,int)>");
  RootbeerClassLoader.v().addFollowSignature("<edu.syr.pcpratts.rootbeer.runtime.Serializer: void <init>(edu.syr.pcpratts.rootbeer.runtime.memory.Memory,edu.syr.pcpratts.rootbeer.runtime.memory.Memory)>");
  RootbeerClassLoader.v().addFollowSignature("<edu.syr.pcpratts.rootbeer.runtime.memory.Memory: void useInstancePointer()>");
  RootbeerClassLoader.v().addFollowSignature("<edu.syr.pcpratts.rootbeer.runtime.memory.Memory: void useStaticPointer()>");
  RootbeerClassLoader.v().addFollowSignature("<edu.syr.pcpratts.rootbeer.runtime.memory.Memory: long mallocWithSize(int)>");
  RootbeerClassLoader.v().addFollowSignature("<edu.syr.pcpratts.rootbeer.runtime.memory.Memory: void setAddress(long)>");
  RootbeerClassLoader.v().addConditionalCudaEntry(new StringConstantCudaEntry());
  DontDfsMethods dont_dfs_methods=new DontDfsMethods();
  Set<String> dont_dfs_set=dont_dfs_methods.get();
  for (  String dont_dfs : dont_dfs_set) {
    RootbeerClassLoader.v().addDontDfsMethod(dont_dfs);
  }
  List<String> cuda_fields=new ArrayList<String>();
  cuda_fields.add("<java.lang.Class: java.lang.String name>");
  RootbeerClassLoader.v().setCudaFields(cuda_fields);
  RootbeerClassLoader.v().loadNecessaryClasses();
}
