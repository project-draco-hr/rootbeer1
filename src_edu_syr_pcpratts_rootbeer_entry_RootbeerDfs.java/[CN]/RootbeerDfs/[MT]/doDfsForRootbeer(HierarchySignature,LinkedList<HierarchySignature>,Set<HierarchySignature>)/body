{
  if (visited.contains(signature)) {
    return;
  }
  visited.add(signature);
  StringToType converter=new StringToType();
  FieldSignatureUtil futil=new FieldSignatureUtil();
  MethodSignatureUtil mutil=new MethodSignatureUtil();
  m_currDfsInfo.addType(signature.getClassName());
  m_currDfsInfo.addType(signature.getReturnType());
  m_currDfsInfo.addMethod(signature.toString());
  ClassHierarchy class_hierarchy=RootbeerClassLoader.v().getClassHierarchy();
  List<HierarchySignature> virt_methods=class_hierarchy.getVirtualMethods(signature);
  for (  HierarchySignature virt_method : virt_methods) {
    if (RootbeerClassLoader.v().dontFollow(virt_method)) {
      continue;
    }
    if (virt_method.equals(signature) == false) {
      queue.add(virt_method);
    }
  }
  HierarchyValueSwitch value_switch=RootbeerClassLoader.v().getValueSwitch(signature);
  for (  Integer num : value_switch.getAllTypesInteger()) {
    String type_str=StringNumbers.v().getString(num);
    Type type=converter.convert(type_str);
    m_currDfsInfo.addType(type);
  }
  for (  HierarchySignature method_sig : value_switch.getMethodRefsHierarchy()) {
    if (RootbeerClassLoader.v().dontFollow(method_sig)) {
      continue;
    }
    queue.add(method_sig);
  }
  for (  String field_ref : value_switch.getFieldRefs()) {
    futil.parse(field_ref);
    SootField soot_field=futil.getSootField();
    m_currDfsInfo.addField(soot_field);
  }
  for (  Integer num : value_switch.getInstanceOfsInteger()) {
    String type_str=StringNumbers.v().getString(num);
    Type type=converter.convert(type_str);
    m_currDfsInfo.addInstanceOf(type);
  }
}
