{
  BytecodeLanguage bcl=new BytecodeLanguage();
  bcl.openClass(mClass);
  bcl.startMethod("run",VoidType.v());
  Local thislocal=bcl.refThis();
  HashMap<String,Local> locals_made=new HashMap<String,Local>();
  List<Value> values_not_set=block.getInputValues();
  for (  Value v : values_not_set) {
    if (v instanceof Local == false)     continue;
    Local local=(Local)v.clone();
    locals_made.put(local.toString(),local);
    bcl.refInstanceFieldToInput(thislocal,local.getName(),local);
  }
  List<Unit> whole_body=block.getLoop().getWholeBodyOfMethod();
  Unit unit_after_loop=block.getLoop().getUnitAfterWholeBodyOfMethod();
  Unit new_unit_after_loop=Jimple.v().newReturnVoidStmt();
  for (int i=block.getStart(); i <= block.getStop(); ++i) {
    Unit src=whole_body.get(i);
    if (src instanceof AssignStmt) {
      AssignStmt assign=(AssignStmt)src;
      Value v=assign.getLeftOp();
      if (values_not_set.contains(v))       continue;
    }
    if (src instanceof IfStmt) {
      IfStmt if_stmt=(IfStmt)src;
      UnitBox target_box=if_stmt.getTargetBox();
      if (target_box.getUnit().equals(unit_after_loop))       target_box.setUnit(new_unit_after_loop);
    }
    List boxes=src.getUseAndDefBoxes();
    for (int k=0; k < boxes.size(); ++k) {
      ValueBox curr_box=(ValueBox)boxes.get(k);
      Value curr_value=curr_box.getValue();
      if (curr_value instanceof Local == false)       continue;
      Local curr_local=(Local)curr_value;
      if (locals_made.containsKey(curr_local.toString()))       curr_box.setValue(locals_made.get(curr_local.toString()));
    }
    bcl.getAssembler().add(src);
  }
  List<Value> output_args=block.getOutputValues();
  for (  Value value : output_args) {
    if (value instanceof Local == false)     continue;
    Local local=(Local)value;
    SootField field=mClass.getField(local.getName(),local.getType());
    Value lhs_assign=Jimple.v().newInstanceFieldRef(thislocal,field.makeRef());
    Unit assign=Jimple.v().newAssignStmt(lhs_assign,local);
    bcl.getAssembler().add(assign);
  }
  bcl.getAssembler().add(new_unit_after_loop);
  bcl.endMethod();
}
