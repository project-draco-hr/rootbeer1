{
  int i;
  int ih;
  int n;
  double fw;
  double z;
  int[] iq=new int[20];
  double[] f=new double[20];
  double[] q=new double[20];
  boolean recompute=false;
  int jk=4;
  int jz=jk;
  int jv=max((e0 - 3) / 24,0);
  int q0=e0 - 24 * (jv + 1);
  int j=jv - nx;
  int m=nx + jk;
  for (i=0; i <= m; i++, j++)   f[i]=(j < 0) ? 0 : TWO_OVER_PI[j];
  for (i=0; i <= jk; i++) {
    for (j=0, fw=0; j <= nx; j++)     fw+=x[j] * f[nx + i - j];
    q[i]=fw;
  }
  do {
    for (i=0, j=jz, z=q[jz]; j > 0; i++, j--) {
      fw=(int)(1 / TWO_24 * z);
      iq[i]=(int)(z - TWO_24 * fw);
      z=q[j - 1] + fw;
    }
    z=scale(z,q0);
    z-=8 * floor(z * 0.125);
    n=(int)z;
    z-=n;
    ih=0;
    if (q0 > 0) {
      i=iq[jz - 1] >> (24 - q0);
      n+=i;
      iq[jz - 1]-=i << (24 - q0);
      ih=iq[jz - 1] >> (23 - q0);
    }
 else     if (q0 == 0)     ih=iq[jz - 1] >> 23;
 else     if (z >= 0.5)     ih=2;
    if (ih > 0) {
      n+=1;
      int carry=0;
      for (i=0; i < jz; i++) {
        j=iq[i];
        if (carry == 0) {
          if (j != 0) {
            carry=1;
            iq[i]=0x1000000 - j;
          }
        }
 else         iq[i]=0xffffff - j;
      }
switch (q0) {
case 1:
        iq[jz - 1]&=0x7fffff;
      break;
case 2:
    iq[jz - 1]&=0x3fffff;
}
if (ih == 2) {
  z=1 - z;
  if (carry != 0)   z-=scale(1,q0);
}
}
if (z == 0) {
j=0;
for (i=jz - 1; i >= jk; i--) j|=iq[i];
if (j == 0) {
  int k;
  for (k=1; iq[jk - k] == 0; k++)   ;
  for (i=jz + 1; i <= jz + k; i++) {
    f[nx + i]=TWO_OVER_PI[jv + i];
    for (j=0, fw=0; j <= nx; j++)     fw+=x[j] * f[nx + i - j];
    q[i]=fw;
  }
  jz+=k;
  recompute=true;
}
}
}
 while (recompute);
if (z == 0) {
jz--;
q0-=24;
while (iq[jz] == 0) {
jz--;
q0-=24;
}
}
 else {
z=scale(z,-q0);
if (z >= TWO_24) {
fw=(int)(1 / TWO_24 * z);
iq[jz]=(int)(z - TWO_24 * fw);
jz++;
q0+=24;
iq[jz]=(int)fw;
}
 else iq[jz]=(int)z;
}
fw=scale(1,q0);
for (i=jz; i >= 0; i--) {
q[i]=fw * iq[i];
fw*=1 / TWO_24;
}
double[] fq=new double[20];
for (i=jz; i >= 0; i--) {
fw=0;
for (int k=0; k <= jk && k <= jz - i; k++) fw+=PI_OVER_TWO[k] * q[i + k];
fq[jz - i]=fw;
}
fw=0;
for (i=jz; i >= 0; i--) fw+=fq[i];
y[0]=(ih == 0) ? fw : -fw;
fw=fq[0] - fw;
for (i=1; i <= jz; i++) fw+=fq[i];
y[1]=(ih == 0) ? fw : -fw;
return n;
}
