{
  Token curr;
  if (m_Last != null) {
    curr=m_Last;
    m_Last=null;
  }
 else {
    curr=m_LowerLevel.next();
  }
  if (matchingControlSimple(curr.getString())) {
    List<Token> full_statement=readOnePastClosingParen();
    if (full_statement.size() < 1)     throw new RuntimeException("this code doesn't compile");
    Token last=full_statement.get(full_statement.size() - 1);
    if (curr.getString().equals("while") && last.getString().equals(";")) {
    }
 else     if (last.getString().equals("{") == false) {
      full_statement.remove(full_statement.size() - 1);
      full_statement.add(new Token("{"));
      m_Last=last;
      m_ScopeStack.add(" ");
    }
 else {
      m_ScopeStack.add("{");
      m_Last=null;
    }
    m_Tokens.add(curr);
    m_Tokens.addAll(full_statement);
  }
 else   if (matchingControlElse(curr.getString())) {
    Token next=m_LowerLevel.peek(0);
    if (next == null)     return;
    if (next.getString().equals("{") == false) {
      m_ScopeStack.add(" ");
      m_LowerLevel.putback(new Token("{"));
      m_Tokens.add(curr);
    }
 else {
      m_ScopeStack.add("{");
      m_Last=null;
      m_Tokens.add(curr);
    }
  }
 else   if (curr.getString().equals(";")) {
    m_Tokens.add(curr);
    while (true) {
      if (m_ScopeStack.isEmpty())       return;
      String top=m_ScopeStack.get(m_ScopeStack.size() - 1);
      m_ScopeStack.remove(m_ScopeStack.size() - 1);
      if (top.equals(" ")) {
        m_Tokens.add(new Token("}"));
      }
 else {
        return;
      }
    }
  }
 else {
    m_Tokens.add(curr);
  }
}
