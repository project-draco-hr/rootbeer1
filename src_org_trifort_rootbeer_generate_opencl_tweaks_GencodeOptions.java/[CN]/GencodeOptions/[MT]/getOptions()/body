{
  String version=getVersion();
  String sm_35;
  String sm_30;
  String sm_21;
  String sm_20;
  String sm_12;
  if (File.separator.equals("/")) {
    sm_35="--generate-code arch=compute_35,code=\"sm_35,compute_35\" ";
    sm_30="--generate-code arch=compute_30,code=\"sm_30,compute_30\" ";
    sm_21="--generate-code arch=compute_20,code=\"sm_21,compute_20\" ";
    sm_20="--generate-code arch=compute_20,code=\"sm_20,compute_20\" ";
    sm_12="--generate-code arch=compute_12,code=\"sm_12,compute_12\" ";
  }
 else {
    sm_35="--generate-code arch=compute_35,code=\"sm_35\" ";
    sm_30="--generate-code arch=compute_30,code=\"sm_30\" ";
    sm_21="--generate-code arch=compute_20,code=\"sm_21\" ";
    sm_20="--generate-code arch=compute_20,code=\"sm_20\" ";
    sm_12="--generate-code arch=compute_12,code=\"sm_12\" ";
  }
  if (Configuration.compilerInstance().getRecursion()) {
    sm_12="";
  }
  if (Configuration.compilerInstance().getDoubles()) {
    sm_12="";
  }
  if (version.equals("Cuda compilation tools, release 6.0, V6.0.1")) {
    return sm_35 + sm_30 + sm_21+ sm_20+ sm_12;
  }
 else   if (version.equals("Cuda compilation tools, release 5.5, V5.5.0")) {
    return sm_35 + sm_30 + sm_21+ sm_20+ sm_12;
  }
 else   if (version.equals("Cuda compilation tools, release 5.0, V0.2.1221")) {
    return sm_35 + sm_30 + sm_21+ sm_20+ sm_12;
  }
 else   if (version.equals("Cuda compilation tools, release 4.2, V0.2.1221")) {
    return sm_30 + sm_21 + sm_20+ sm_12;
  }
 else   if (version.equals("Cuda compilation tools, release 4.1, V0.2.1221")) {
    return sm_30 + sm_21 + sm_20+ sm_12;
  }
 else   if (version.equals("Cuda compilation tools, release 4.0, V0.2.1221")) {
    return sm_30 + sm_21 + sm_20+ sm_12;
  }
 else   if (version.equals("Cuda compilation tools, release 3.2, V0.2.1221")) {
    return sm_30 + sm_21 + sm_20+ sm_12;
  }
 else   if (version.equals("Cuda compilation tools, release 3.1, V0.2.1221")) {
    return sm_20 + sm_12;
  }
 else   if (version.equals("Cuda compilation tools, release 3.0, V0.2.1221")) {
    return sm_20 + sm_12;
  }
 else {
    throw new RuntimeException("unsupported nvcc version. version 3.0 or higher needed. arch sm_20 or higher needed.");
  }
}
