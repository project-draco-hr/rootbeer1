{
  int pivot, L, R;
  start[index]=index;
  end[index]=size - 1;
  while (index >= 0) {
    L=start[index];
    R=end[index];
    if (L < R) {
      pivot=values[L];
      while (L < R) {
        while (values[R] >= pivot && L < R)         R--;
        if (L < R)         values[L++]=values[R];
        while (values[L] < pivot && L < R)         L++;
        if (L < R)         values[R--]=values[L];
      }
      values[L]=pivot;
      start[index + 1]=L + 1;
      end[index + 1]=end[index];
      end[index++]=L;
      if (end[index] - start[index] > end[index - 1] - start[index - 1]) {
        int tmp=start[index];
        start[index]=start[index - 1];
        start[index - 1]=tmp;
        tmp=end[index];
        end[index]=end[index - 1];
        end[index - 1]=tmp;
      }
    }
 else {
      index--;
    }
  }
}
