{
  SootClass ret=new SootClass(new_class_name,Modifier.PUBLIC);
  List<SootMethod> methods=soot_class.getMethods();
  for (  SootMethod method : methods) {
    SootMethod new_method=new SootMethod(method.getName(),method.getParameterTypes(),method.getReturnType(),method.getModifiers(),method.getExceptions());
    if (method.isConcrete()) {
      Body body=method.retrieveActiveBody();
      new_method.setActiveBody((Body)body.clone());
    }
    ret.addMethod(new_method);
  }
  Iterator<SootField> iter=soot_class.getFields().iterator();
  while (iter.hasNext()) {
    SootField next=iter.next();
    SootField cloned=new SootField(next.getName(),next.getType(),next.getModifiers());
    ret.addField(cloned);
  }
  Iterator<SootClass> iter2=soot_class.getInterfaces().iterator();
  while (iter2.hasNext()) {
    SootClass next=iter2.next();
    ret.addInterface(next);
  }
  if (soot_class.hasSuperclass()) {
    ret.setSuperclass(soot_class.getSuperclass());
  }
  if (soot_class.hasOuterClass()) {
    ret.setOuterClass(soot_class.getOuterClass());
  }
  return ret;
}
