{
  initComponents();
  img=new BufferedImage(10,10,BufferedImage.TYPE_3BYTE_BGR);
  HyperCube hc=hypercube(3,4,2.5);
  ArrayList<double[]> xs=new ArrayList<double[]>();
  xs.addAll(hc.points);
  xs.addAll(hc.lines);
  System.err.println(xs.size());
  spheres=new double[xs.size()][];
  for (int i=0; i < xs.size(); ++i) {
    spheres[i]=xs.get(i);
  }
  for (int i=0; i < spheres.length; ++i) {
    for (int j=3; j < numDimensions; ++j) {
      spheres[i][j]+=2.5;
    }
  }
  observer[2]=-10;
  vx[0]=1;
  vy[1]=1;
  final double[] light=new double[]{0,0,-5,0};
  final double[] dlight=new double[]{0,0,0,0};
  new Thread(){
    @Override public void run(){
      while (true) {
        for (int i=0; i < dlight.length; ++i) {
        }
        double[] vx2=mul(vx,rotationMatrix);
        double[] vy2=mul(vy,rotationMatrix);
        double[] observer2=mul(observer,rotationMatrix);
        BufferedImage im=img;
        int[] pixels=new int[im.getWidth() * im.getHeight()];
        RayGenerator.generate(im.getWidth(),im.getHeight(),minx,maxx,miny,maxy,pixels,spheres,light,observer2,1,vx2,vy2,numDimensions);
        im.setRGB(0,0,im.getWidth(),im.getHeight(),pixels,0,im.getWidth());
        repaint();
        requestFocus();
        try {
          sleep(1);
        }
 catch (        InterruptedException ex) {
          Logger.getLogger(NewJPanel.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
    }
  }
.start();
}
