{
  if (type instanceof RefType == false) {
    throw new RuntimeException("please report bug in OpenCLMethod.writeInstanceInvoke");
  }
  RefType ref_type=(RefType)type;
  OpenCLMethod corrected_this=new OpenCLMethod(m_sootMethod,ref_type.getSootClass());
  StringBuilder ret=new StringBuilder();
  Value base=arg0.getBase();
  if (base instanceof Local == false)   throw new UnsupportedOperationException("How do we handle an invoke on a non loca?");
  Local local=(Local)base;
  if (isConstructor()) {
    ret.append("org_trifort_gc_assign (gc_info, \n&" + local.getName() + ", ");
  }
  String function_name=method_prefix + corrected_this.getPolymorphicName();
  ret.append(function_name + "(");
  List args=arg0.getArgs();
  List<String> args_list=new ArrayList<String>();
  args_list.add("gc_info");
  if (isConstructor() == false)   args_list.add(local.getName());
  for (int i=0; i < args_list.size() - 1; ++i) {
    ret.append(args_list.get(i));
    ret.append(",\n ");
  }
  if (args_list.size() > 0) {
    ret.append(args_list.get(args_list.size() - 1));
    if (args.size() > 0)     ret.append(",\n ");
  }
  MethodJimpleValueSwitch quick_value_switch=new MethodJimpleValueSwitch(ret);
  for (int i=0; i < args.size(); ++i) {
    Value arg=(Value)args.get(i);
    arg.apply(quick_value_switch);
    if (i < args.size() - 1)     ret.append(",\n ");
  }
  ret.append(", exception");
  ret.append(")");
  if (isConstructor()) {
    ret.append(")");
  }
  return ret.toString();
}
