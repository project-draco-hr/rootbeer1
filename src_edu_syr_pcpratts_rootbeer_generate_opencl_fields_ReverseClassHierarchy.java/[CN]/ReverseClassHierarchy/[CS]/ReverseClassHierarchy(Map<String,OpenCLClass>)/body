{
  m_Hierarchy=new ArrayList<TreeNode>();
  m_Classes=classes;
  Set<String> key_set=classes.keySet();
  Set<String> roots=new HashSet<String>();
  ClassHierarchy class_hierarchy=RootbeerClassLoader.v().getClassHierarchy();
  SootClass obj_class=Scene.v().getSootClass("java.lang.Object");
  HierarchyGraph hgraph=class_hierarchy.getHierarchyGraph(obj_class);
  List<Integer> queue=new LinkedList<Integer>();
  queue.add(0);
  while (!queue.isEmpty()) {
    Integer class_num=queue.get(0);
    queue.remove(0);
    String class_name=StringNumbers.v().getString(class_num);
    if (key_set.contains(class_name) && !class_name.equals("java.lang.Object")) {
      if (roots.contains(class_name)) {
        continue;
      }
 else {
        SootClass soot_class=Scene.v().getSootClass(class_name);
        OpenCLClass ocl_class=classes.get(class_name);
        TreeNode tree=new TreeNode(soot_class,ocl_class);
        m_Hierarchy.add(tree);
        roots.add(class_name);
      }
    }
 else {
      queue.addAll(hgraph.getChildren(class_num));
    }
    if (roots.size() == m_Classes.size()) {
      break;
    }
  }
  for (  String class_name : m_Classes.keySet()) {
    if (roots.contains(class_name)) {
      continue;
    }
    List<String> up_queue=new LinkedList<String>();
    up_queue.add(class_name);
    while (up_queue.isEmpty() == false) {
      String curr_class=up_queue.get(0);
      up_queue.remove(0);
      if (roots.contains(curr_class)) {
        SootClass root=Scene.v().getSootClass(curr_class);
        TreeNode node=getNode(root);
        SootClass soot_class=Scene.v().getSootClass(class_name);
        OpenCLClass ocl_class=classes.get(class_name);
        node.addChild(soot_class,ocl_class);
        break;
      }
 else {
        int num=StringNumbers.v().addString(curr_class);
        Set<Integer> parents=hgraph.getParents(num);
        for (        Integer parent : parents) {
          up_queue.add(StringNumbers.v().getString(parent));
        }
      }
    }
  }
}
