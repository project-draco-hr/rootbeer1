{
  if (m_sootMethod.getName().equals("<init>"))   return "";
  SootMethod soot_method=null;
  String subsig=m_sootMethod.getSubSignature();
  while (true) {
    if (soot_class.declaresMethod(subsig)) {
      SootMethod curr=soot_class.getMethod(subsig);
      if (curr.isConcrete()) {
        soot_method=curr;
        break;
      }
    }
    if (soot_class.hasSuperclass()) {
      soot_class=soot_class.getSuperclass();
    }
 else {
      throw new RuntimeException("cannot find concrete base method: " + m_sootMethod.getSignature());
    }
  }
  OpenCLMethod ocl_method=new OpenCLMethod(soot_method,soot_class);
  String ret=ocl_method.getPolymorphicName() + "(";
  ret+="gc_info, thisref";
  List args=soot_method.getParameterTypes();
  if (args.size() != 0)   ret+=", ";
  for (int i=0; i < args.size(); ++i) {
    ret+="parameter" + Integer.toString(i);
    if (i < args.size() - 1)     ret+=", ";
  }
  ret+=", exception);";
  return ret;
}
