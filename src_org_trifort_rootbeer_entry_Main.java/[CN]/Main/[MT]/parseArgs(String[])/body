{
  m_num_args=args.length;
  boolean arch32bit=false;
  boolean arch64bit=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
    if (arg.equals("-nemu")) {
      m_mode=Configuration.MODE_NEMU;
    }
 else     if (arg.equals("-jemu")) {
      m_mode=Configuration.MODE_JEMU;
    }
 else     if (arg.equals("-remap-sparse")) {
      Configuration.compilerInstance().setRemapSparse();
    }
 else     if (arg.equals("-mainjar")) {
      m_mainJar=safeGet(args,i + 1,"-mainjar");
      ++i;
    }
 else     if (arg.equals("-libjar")) {
      String lib=safeGet(args,i + 1,"-libjar");
      m_libJars.add(lib);
      ++i;
    }
 else     if (arg.equals("-directory")) {
      String dir=safeGet(args,i + 1,"-directory");
      m_directories.add(dir);
      ++i;
    }
 else     if (arg.equals("-destjar")) {
      m_destJar=safeGet(args,i + 1,"-destjar");
      ++i;
    }
 else     if (arg.equals("-runtests")) {
      m_runTests=true;
      m_testCase=null;
      m_runHardTests=true;
    }
 else     if (arg.equals("-runeasytests")) {
      m_runTests=true;
      m_testCase=null;
      m_runHardTests=false;
    }
 else     if (arg.equals("-runtest")) {
      m_runTests=true;
      m_testCase=safeGet(args,i + 1,"-runtest");
      m_runHardTests=true;
      ++i;
    }
 else     if (arg.equals("-printdeviceinfo")) {
      m_printDeviceInfo=true;
    }
 else     if (arg.equals("-disable-class-remapping")) {
      m_disableClassRemapping=true;
    }
 else     if (arg.equals("-large-mem-tests")) {
      m_largeMemTests=true;
    }
 else     if (arg.equals("-maxrregcount")) {
      String count=safeGet(args,i + 1,"-maxrregcount");
      ++i;
      Configuration.compilerInstance().setMaxRegCount(Integer.parseInt(count));
    }
 else     if (arg.equals("-noarraychecks")) {
      Configuration.compilerInstance().setArrayChecks(false);
    }
 else     if (arg.equals("-nodoubles")) {
      Configuration.compilerInstance().setDoubles(false);
    }
 else     if (arg.equals("-norecursion")) {
      Configuration.compilerInstance().setRecursion(false);
    }
 else     if (arg.equals("-noexceptions")) {
      Configuration.compilerInstance().setExceptions(false);
    }
 else     if (arg.equals("-keepmains")) {
      Configuration.compilerInstance().setKeepMains(true);
    }
 else     if (arg.equals("-shared-mem-size")) {
      String size=safeGet(args,i + 1,"-shared-mem-size");
      ++i;
      int int_size=Integer.parseInt(size);
      Configuration.compilerInstance().setSharedMemSize(int_size);
    }
 else     if (arg.equals("-32bit")) {
      arch32bit=true;
    }
 else     if (arg.equals("-64bit")) {
      arch64bit=true;
    }
 else     if (arg.equals("-manualcuda")) {
      String filename=safeGet(args,i + 1,"-manualcuda");
      ++i;
      Configuration.compilerInstance().setManualCuda();
      Configuration.compilerInstance().setManualCudaFilename(filename);
    }
 else     if (arg.equals("-computecapability")) {
      String computeCapability=safeGet(args,i + 1,"-computecapability");
      ++i;
      if (computeCapability.equalsIgnoreCase("sm_11")) {
        Configuration.compilerInstance().setComputeCapability(ComputeCapability.SM_11);
      }
 else       if (computeCapability.equalsIgnoreCase("sm_12")) {
        Configuration.compilerInstance().setComputeCapability(ComputeCapability.SM_12);
      }
 else       if (computeCapability.equalsIgnoreCase("sm_20")) {
        Configuration.compilerInstance().setComputeCapability(ComputeCapability.SM_20);
      }
 else       if (computeCapability.equalsIgnoreCase("sm_21")) {
        Configuration.compilerInstance().setComputeCapability(ComputeCapability.SM_21);
      }
 else       if (computeCapability.equalsIgnoreCase("sm_30")) {
        Configuration.compilerInstance().setComputeCapability(ComputeCapability.SM_30);
      }
 else       if (computeCapability.equalsIgnoreCase("sm_35")) {
        Configuration.compilerInstance().setComputeCapability(ComputeCapability.SM_35);
      }
 else {
        System.out.println("Unsupported compute capability: " + computeCapability);
      }
    }
 else     if (m_simpleCompile == false) {
      m_mainJar=arg;
      m_destJar=safeGet(args,i + 1,arg);
      File main_jar=new File(m_mainJar);
      if (main_jar.exists() == false) {
        System.out.println("Cannot find: " + m_mainJar);
        System.exit(0);
      }
      ++i;
      m_simpleCompile=true;
    }
  }
  if (Configuration.compilerInstance().getRecursion() && m_printDeviceInfo == false) {
    System.out.println("warning: sm_12 and sm_11 not supported with recursion. use -norecursion to enable.");
  }
  if (Configuration.compilerInstance().getDoubles() && m_printDeviceInfo == false) {
    System.out.println("warning: sm_12 and sm_11 not supported with doubles. use -nodoubles to enable.");
  }
  if (arch32bit && !arch64bit) {
    Configuration.compilerInstance().setCompileArchitecture(CompileArchitecture.Arch32bit);
  }
 else   if (!arch32bit && arch64bit) {
    Configuration.compilerInstance().setCompileArchitecture(CompileArchitecture.Arch64bit);
  }
 else {
    Configuration.compilerInstance().setCompileArchitecture(CompileArchitecture.Arch32bit64bit);
  }
  Configuration.compilerInstance().setMode(m_mode);
}
