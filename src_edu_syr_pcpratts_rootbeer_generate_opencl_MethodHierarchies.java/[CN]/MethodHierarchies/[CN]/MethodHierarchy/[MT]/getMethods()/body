{
  List<OpenCLMethod> ret=new ArrayList<OpenCLMethod>();
  if (m_sootMethod.isConstructor()) {
    OpenCLMethod method=new OpenCLMethod(m_sootMethod,m_sootMethod.getDeclaringClass());
    ret.add(method);
    return ret;
  }
  Set<Type> class_hierarchy=RootbeerClassLoader.v().getDfsInfo().getPointsTo(m_sootMethod.getSignature());
  Set<SootClass> valid_hierarchy_classes=RootbeerClassLoader.v().getValidHierarchyClasses();
  if (class_hierarchy == null) {
    if (m_sootMethod.isConcrete() == false) {
      return ret;
    }
    OpenCLMethod method=new OpenCLMethod(m_sootMethod,m_sootMethod.getDeclaringClass());
    ret.add(method);
    return ret;
  }
  class_hierarchy.add(RefType.v(m_sootMethod.getDeclaringClass().toString()));
  MethodSignatureUtil util=new MethodSignatureUtil();
  util.parse(m_sootMethod.getSignature());
  String method_name=util.getMethodName();
  List<Type> params=util.getParameterTypesTyped();
  for (  Type type : class_hierarchy) {
    if (type instanceof RefType) {
      RefType ref_type=(RefType)type;
      SootClass soot_class=ref_type.getSootClass();
      if (soot_class.declaresMethod(method_name,params)) {
        List<SootMethod> methods=soot_class.getMethods();
        List<SootMethod> found_methods=new ArrayList<SootMethod>();
        MethodEqual method_equal=new MethodEqual();
        for (        SootMethod method : methods) {
          if (method_equal.exceptReturnType(method.getSignature(),util.getSignature())) {
            found_methods.add(method);
          }
        }
        if (found_methods.size() == 1) {
          SootMethod soot_method=found_methods.get(0);
          if (soot_method.isConcrete() == false) {
            continue;
          }
          OpenCLMethod method=new OpenCLMethod(soot_method,soot_class);
          ret.add(method);
        }
 else {
          int matching_count=0;
          for (          SootMethod soot_method : found_methods) {
            if (soot_method.getReturnType().equals(RefType.v(m_sootMethod.getDeclaringClass()))) {
              if (soot_method.isConcrete() == false) {
                continue;
              }
              OpenCLMethod method=new OpenCLMethod(soot_method,soot_class);
              ret.add(method);
              matching_count++;
            }
          }
          if (matching_count == 0) {
            throw new RuntimeException("matching_count == 0");
          }
        }
      }
    }
    if (type instanceof AnySubType) {
      AnySubType any_sub_type=(AnySubType)type;
      RefType base=any_sub_type.getBase();
      SootClass soot_class=base.getSootClass();
      FastHierarchy fast_hierarchy=Scene.v().getOrMakeFastHierarchy();
      Collection<SootClass> subclasses_col=fast_hierarchy.getSubclassesOf(soot_class);
      List<SootClass> subclasses=new ArrayList<SootClass>();
      subclasses.addAll(subclasses_col);
      subclasses.add(soot_class);
      for (      SootClass subclass : subclasses) {
        if (valid_hierarchy_classes.contains(subclass) == false) {
          continue;
        }
        if (subclass.declaresMethod(m_methodSubsignature)) {
          SootMethod soot_method=subclass.getMethod(m_methodSubsignature);
          if (soot_method.isConcrete() == false) {
            continue;
          }
          OpenCLMethod method=new OpenCLMethod(soot_method,subclass);
          ret.add(method);
        }
      }
    }
  }
  return ret;
}
