{
  List<OpenCLMethod> ret=new ArrayList<OpenCLMethod>();
  Set<Type> class_hierarchy=RootbeerClassLoader.v().getDfsInfo().getPointsTo(m_sootMethod.getSignature());
  if (class_hierarchy == null || m_sootMethod.isConstructor()) {
    OpenCLMethod method=new OpenCLMethod(m_sootMethod,m_sootMethod.getDeclaringClass());
    ret.add(method);
    return ret;
  }
  for (  Type type : class_hierarchy) {
    if (type instanceof RefType) {
      System.out.println("getMethods: " + m_sootMethod + " "+ type.toString());
      RefType ref_type=(RefType)type;
      SootClass soot_class=ref_type.getSootClass();
      SootMethod soot_method=null;
      try {
        soot_method=soot_class.getMethod(m_methodSubsignature);
      }
 catch (      Exception ex) {
        continue;
      }
      if (soot_method.isConcrete() == false) {
        continue;
      }
      OpenCLMethod method=new OpenCLMethod(soot_method,soot_class);
      ret.add(method);
    }
    if (type instanceof AnySubType) {
      AnySubType any_sub_type=(AnySubType)type;
      RefType base=any_sub_type.getBase();
      SootClass soot_class=base.getSootClass();
      FastHierarchy fast_hierarchy=Scene.v().getFastHierarchy();
      Collection<SootClass> subclasses_col=fast_hierarchy.getSubclassesOf(soot_class);
      List<SootClass> subclasses=new ArrayList<SootClass>();
      subclasses.addAll(subclasses_col);
      subclasses.add(soot_class);
      for (      SootClass subclass : subclasses) {
        if (subclass.declaresMethod(m_methodSubsignature)) {
          SootMethod soot_method=subclass.getMethod(m_methodSubsignature);
          if (soot_method.isConcrete() == false) {
            continue;
          }
          OpenCLMethod method=new OpenCLMethod(soot_method,subclass);
          ret.add(method);
        }
      }
    }
  }
  return ret;
}
