{
  m_usesGarbageCollector=false;
  Set<String> methods=RootbeerScene.v().getDfsInfo().getAllMethods();
  MethodSignatureUtil util=new MethodSignatureUtil();
  for (  String method_sig : methods) {
    util.parse(method_sig);
    String cls=util.getClassName();
    String method_sub_sig=util.getMethodSubSignature();
    SootClass soot_class=Scene.v().getSootClass(cls);
    OpenCLScene.v().addClass(soot_class);
    SootMethod method=RootbeerScene.v().getMethod(soot_class,method_sub_sig);
    addMethod(method);
  }
  Set<SootField> fields=RootbeerScene.v().getDfsInfo().getFields();
  for (  SootField field : fields) {
    addField(field);
  }
  Set<ArrayType> array_types=RootbeerScene.v().getDfsInfo().getArrayTypes();
  for (  ArrayType array_type : array_types) {
    OpenCLArrayType ocl_array_type=new OpenCLArrayType(array_type);
    addArrayType(ocl_array_type);
  }
  Set<Type> instanceofs=RootbeerScene.v().getDfsInfo().getInstanceOfs();
  for (  Type type : instanceofs) {
    addInstanceof(type);
  }
  StringBuilder ret=new StringBuilder();
  ret.append(headerString());
  ret.append(methodPrototypesString());
  ret.append(garbageCollectorString());
  ret.append(methodBodiesString());
  String cuda_code;
  if (true) {
    cuda_code=ret.toString();
  }
 else {
    cuda_code=readCudaCodeFromFile();
  }
  String mangle=NameMangling.v().mangle(VoidType.v());
  String replacement=getRuntimeBasicBlockClassName() + "_gpuMethod" + mangle;
  replacement=replacement.replace("$","\\$");
  cuda_code=cuda_code.replaceAll("%%invoke_run%%",replacement);
  PrintWriter writer=new PrintWriter(new FileWriter("generated.cu"));
  writer.println(cuda_code.toString());
  writer.flush();
  writer.close();
  return cuda_code;
}
