{
  try {
    File pre_dead=new File("pre_dead.cu");
    PrintWriter writer=new PrintWriter(pre_dead.getAbsoluteFile());
    writer.println(cuda_code.toString());
    writer.flush();
    writer.close();
    DeadMethods dead_methods=new DeadMethods("entry");
    cuda_code=dead_methods.filter(cuda_code);
    File generated=new File("generated.cu");
    writer=new PrintWriter(generated.getAbsoluteFile());
    writer.println(cuda_code.toString());
    writer.flush();
    writer.close();
    File code_file=new File("code_file.ptx");
    String modelString="-m64";
    String command;
    if (File.separator.equals("/")) {
      String cuda_path=System.getenv("CUDA_BIN_PATH");
      if (cuda_path == null) {
        cuda_path="/usr/local/cuda/bin";
      }
      command=cuda_path + "/nvcc " + modelString+ " -arch sm_20 -ptx "+ generated.getAbsolutePath()+ " -o "+ code_file.getAbsolutePath();
    }
 else {
      GenerateClScript generate=new GenerateClScript();
      File cl_script=generate.execute(generated,code_file);
      command="cmd /c \"" + cl_script.getAbsolutePath() + "\"";
    }
    CompilerRunner runner=new CompilerRunner();
    List<String> errors=runner.run(command);
    if (errors.isEmpty() == false) {
      return new CompileResult(null,errors);
    }
    List<byte[]> file_contents=null;
    try {
      file_contents=readFile(code_file);
    }
 catch (    FileNotFoundException ex) {
      file_contents=new ArrayList<byte[]>();
      ex.printStackTrace();
    }
    return new CompileResult(file_contents,errors);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}
