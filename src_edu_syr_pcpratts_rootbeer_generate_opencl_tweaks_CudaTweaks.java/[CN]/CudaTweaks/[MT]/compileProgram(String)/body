{
  try {
    File pre_dead=new File(RootbeerPaths.v().getRootbeerHome() + "pre_dead.cu");
    PrintWriter writer=new PrintWriter(pre_dead.getAbsoluteFile());
    writer.println(cuda_code.toString());
    writer.flush();
    writer.close();
    DeadMethods dead_methods=new DeadMethods("entry");
    cuda_code=dead_methods.filter(cuda_code);
    File generated=new File(RootbeerPaths.v().getRootbeerHome() + "generated.cu");
    writer=new PrintWriter(generated.getAbsoluteFile());
    writer.println(cuda_code.toString());
    writer.flush();
    writer.close();
    File code_file=new File(RootbeerPaths.v().getRootbeerHome() + "code_file.ptx");
    String modelString="-m64";
    String command;
    CudaPath cuda_path=new CudaPath();
    if (File.separator.equals("/")) {
      command=cuda_path.get() + "/nvcc " + modelString+ " -arch sm_20 -ptx "+ generated.getAbsolutePath()+ " -o "+ code_file.getAbsolutePath();
      CompilerRunner runner=new CompilerRunner();
      List<String> errors=runner.run(command);
      if (errors.isEmpty() == false) {
        return new CompileResult(null,errors);
      }
    }
 else {
      WindowsCompile compile=new WindowsCompile();
      String nvidia_path=cuda_path.get();
      command="\"" + nvidia_path + "\" -arch sm_20 -cubin \""+ generated.getAbsolutePath()+ "\" -o \""+ code_file.getAbsolutePath()+ "\""+ compile.endl();
      List<String> errors=compile.compile(command);
      if (errors.isEmpty() == false) {
        return new CompileResult(null,errors);
      }
    }
    List<byte[]> file_contents=null;
    try {
      file_contents=readFile(code_file);
    }
 catch (    FileNotFoundException ex) {
      file_contents=new ArrayList<byte[]>();
      ex.printStackTrace();
    }
    return new CompileResult(file_contents,new ArrayList<String>());
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}
