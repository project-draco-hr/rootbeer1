{
  String signature=method.getSignature();
  if (m_currDfsInfo.containsMethod(signature)) {
    return;
  }
  m_currDfsInfo.addMethod(signature);
  SootClass soot_class=method.getDeclaringClass();
  addType(soot_class.getType());
  DfsValueSwitch value_switch=new DfsValueSwitch();
  value_switch.run(method);
  Set<Type> types=value_switch.getTypes();
  for (  Type type : types) {
    addType(type);
  }
  Set<DfsMethodRef> methods=value_switch.getMethodRefs();
  for (  DfsMethodRef ref : methods) {
    SootMethodRef mref=ref.getSootMethodRef();
    SootClass method_class=mref.declaringClass();
    m_resolver.resolveClass(method_class.getName(),SootClass.BODIES);
    SootMethod dest=mref.resolve();
    if (dest.isConcrete() == false) {
      continue;
    }
    addType(method_class.getType());
    m_currDfsInfo.addCallGraphEdge(method,ref.getStmt(),dest);
    doDfs(dest);
  }
  Set<SootFieldRef> fields=value_switch.getFieldRefs();
  for (  SootFieldRef ref : fields) {
    addType(ref.type());
    SootField field=ref.resolve();
    m_currDfsInfo.addField(field);
  }
  Set<Type> instance_ofs=value_switch.getInstanceOfs();
  for (  Type type : instance_ofs) {
    m_currDfsInfo.addInstanceOf(type);
  }
  while (soot_class.hasSuperclass()) {
    SootClass super_class=soot_class.getSuperclass();
    if (super_class.declaresMethod(method.getSubSignature())) {
      SootMethod super_method=super_class.getMethod(method.getSubSignature());
      doDfs(super_method);
    }
    soot_class=super_class;
  }
}
