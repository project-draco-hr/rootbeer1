{
  BytecodeLanguage bcl=m_bcl.top();
  bcl.startMethod("doWriteStaticsToHeap",VoidType.v());
  m_thisRef=bcl.refThis();
  m_currThisRef.push(m_thisRef);
  m_gcObjVisitor.push(m_thisRef);
  m_Mem=bcl.refInstanceField(m_thisRef,"mMem");
  m_currMem.push(m_Mem);
  BclMemory bcl_mem=new BclMemory(bcl,m_Mem);
  bcl_mem.useInstancePointer();
  bcl_mem.mallocWithSize(IntConstant.v(m_StaticOffsets.getEndIndex()));
  PermissionGraph graph=new PermissionGraph();
  List<PermissionGraphNode> roots=graph.getRoots();
  for (  PermissionGraphNode node : roots) {
    SootClass soot_class=node.getSootClass();
    if (soot_class.isApplicationClass()) {
      attachAndCallWriter(soot_class,node.getChildren());
    }
 else {
      doWriter(soot_class,node.getChildren());
    }
  }
  Set<ArrayType> array_types=RootbeerClassLoader.v().getDfsInfo().getArrayTypes();
  for (  ArrayType type : array_types) {
    writeType(type);
  }
  bcl_mem.useStaticPointer();
  bcl_mem.setAddress(LongConstant.v(m_StaticOffsets.getLockStart()));
  int count=m_StaticOffsets.getClassSize();
  for (int i=0; i < count; ++i) {
    bcl_mem.writeInt(-1);
  }
  int zeros=m_StaticOffsets.getZerosSize();
  for (int i=0; i < zeros; ++i) {
    bcl_mem.writeByte((byte)0);
  }
  bcl_mem.useInstancePointer();
  bcl.returnVoid();
  bcl.endMethod();
  m_gcObjVisitor.pop();
}
