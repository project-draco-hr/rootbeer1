{
  boolean negative=(x < 0);
  double y, hi, lo, c, t, e, hxs, hfx, r1;
  int k;
  long bits;
  long h_bits;
  long l_bits;
  c=0.0;
  y=abs(x);
  bits=Double.doubleToLongBits(y);
  h_bits=getHighDWord(bits);
  l_bits=getLowDWord(bits);
  if (h_bits >= 0x4043687aL) {
    if (h_bits >= 0x40862e42L) {
      if (h_bits >= 0x7ff00000L) {
        if (((h_bits & 0x000fffffL) | (l_bits & 0xffffffffL)) != 0)         return x;
 else         return negative ? -1.0 : x;
      }
      if (x > EXP_LIMIT_H)       return Double.POSITIVE_INFINITY;
    }
    if (negative)     return -1.0;
  }
  if (h_bits > 0x3fd62e42L) {
    if (h_bits < 0x3ff0a2b2L) {
      if (negative) {
        hi=x + LN2_H;
        lo=-LN2_L;
        k=-1;
      }
 else {
        hi=x - LN2_H;
        lo=LN2_L;
        k=1;
      }
    }
 else {
      k=(int)(INV_LN2 * x + (negative ? -0.5 : 0.5));
      t=k;
      hi=x - t * LN2_H;
      lo=t * LN2_L;
    }
    x=hi - lo;
    c=(hi - x) - lo;
  }
 else   if (h_bits < 0x3c900000L)   return x;
 else   k=0;
  hfx=0.5 * x;
  hxs=x * hfx;
  r1=1.0 + hxs * (EXPM1_Q1 + hxs * (EXPM1_Q2 + hxs * (EXPM1_Q3 + hxs * (EXPM1_Q4 + hxs * EXPM1_Q5))));
  t=3.0 - r1 * hfx;
  e=hxs * ((r1 - t) / (6.0 - x * t));
  if (k == 0) {
    return x - (x * e - hxs);
  }
 else {
    e=x * (e - c) - c;
    e-=hxs;
    if (k == -1)     return 0.5 * (x - e) - 0.5;
    if (k == 1) {
      if (x < -0.25)       return -2.0 * (e - (x + 0.5));
 else       return 1.0 + 2.0 * (x - e);
    }
    if (k <= -2 || k > 56) {
      y=1.0 - (e - x);
      bits=Double.doubleToLongBits(y);
      h_bits=getHighDWord(bits);
      l_bits=getLowDWord(bits);
      h_bits+=(k << 20);
      y=buildDouble(l_bits,h_bits);
      return y - 1.0;
    }
    t=1.0;
    if (k < 20) {
      bits=Double.doubleToLongBits(t);
      h_bits=0x3ff00000L - (0x00200000L >> k);
      l_bits=getLowDWord(bits);
      t=buildDouble(l_bits,h_bits);
      y=t - (e - x);
      bits=Double.doubleToLongBits(y);
      h_bits=getHighDWord(bits);
      l_bits=getLowDWord(bits);
      h_bits+=(k << 20);
      y=buildDouble(l_bits,h_bits);
    }
 else {
      bits=Double.doubleToLongBits(t);
      h_bits=(0x000003ffL - k) << 20;
      l_bits=getLowDWord(bits);
      t=buildDouble(l_bits,h_bits);
      y=x - (e + t);
      y+=1.0;
      bits=Double.doubleToLongBits(y);
      h_bits=getHighDWord(bits);
      l_bits=getLowDWord(bits);
      h_bits+=(k << 20);
      y=buildDouble(l_bits,h_bits);
    }
  }
  return y;
}
