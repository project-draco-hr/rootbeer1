{
  StringBuilder ret=new StringBuilder();
  String address_qual=Tweaks.v().getGlobalAddressSpaceQualifier();
  ret.append(decl);
  ret.append("{\n");
  List<SootMethod> virtual_methods=getVirtualMethods();
  if (m_sootMethod.isStatic()) {
    if (m_sootMethod.getReturnType() instanceof VoidType == false) {
      ret.append("return ");
    }
    Type first_type=m_sootMethod.getDeclaringClass().getType();
    RefType ref_type=(RefType)first_type;
    SootClass first_class=ref_type.getSootClass();
    String invoke_string=getStaticInvokeString(first_class);
    ret.append(invoke_string + "\n");
  }
 else {
    ret.append(address_qual + " char * thisref_deref;\n");
    ret.append("GC_OBJ_TYPE_TYPE derived_type;\n");
    ret.append("if(thisref == -1){\n");
    ret.append("  *exception = -2;\n");
    ret.append("return ");
    if (m_sootMethod.getReturnType() instanceof VoidType == false)     ret.append("-1");
    ret.append(";\n");
    ret.append("}\n");
    ret.append("thisref_deref = org_trifort_gc_deref(gc_info, thisref);\n");
    if (virtual_methods.size() == 1) {
      SootClass sclass=virtual_methods.get(0).getDeclaringClass();
      String invoke_string=getInvokeString(sclass);
      if (m_sootMethod.getReturnType() instanceof VoidType == false) {
        ret.append("return ");
      }
      ret.append(invoke_string + "\n");
    }
 else {
      ret.append("derived_type = org_trifort_gc_get_type(thisref_deref);\n");
      ret.append("if(0){}\n");
      int count=0;
      List<SootMethod> used_methods=new ArrayList<SootMethod>();
      for (      SootMethod method : virtual_methods) {
        SootClass sclass=method.getDeclaringClass();
        if (sclass.isInterface()) {
          continue;
        }
        String invoke_string=getInvokeString(sclass);
        if (invoke_string == "") {
          continue;
        }
        used_methods.add(method);
      }
      Collections.sort(used_methods,new VirtualMethodComparator());
      for (      SootMethod method : used_methods) {
        SootClass sclass=method.getDeclaringClass();
        String invoke_string=getInvokeString(sclass);
        ret.append("else if(derived_type == " + RootbeerClassLoader.v().getClassNumber(sclass) + "){\n");
        if (m_sootMethod.getReturnType() instanceof VoidType == false) {
          ret.append("return ");
        }
        ret.append(invoke_string + "\n");
        ret.append("}\n");
        count++;
      }
    }
  }
  ret.append("return ");
  if (m_sootMethod.getReturnType() instanceof VoidType == false)   ret.append("-1");
  ret.append(";\n");
  ret.append("}\n");
  return ret.toString();
}
