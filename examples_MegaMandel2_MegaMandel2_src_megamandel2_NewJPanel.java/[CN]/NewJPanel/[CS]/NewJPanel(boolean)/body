{
  initComponents();
  img=new BufferedImage(256,256,BufferedImage.TYPE_3BYTE_BGR);
  m_cpu=cpu;
  if (cpu) {
    for (int i=0; i < threads.length; ++i) {
      threads[i]=new MyThread();
    }
    for (    MyThread mt : threads) {
      mt.start();
    }
  }
  new Thread(){
    @Override public void run(){
      while (true) {
        BufferedImage im=img;
        int width=im.getWidth();
        int height=im.getHeight();
        int[] ps=new int[width * height];
        if (m_cpu) {
          cpuGenerate(width,height,minx,maxx,miny,maxy,maxdepth,ps);
        }
 else {
          MandelGenerator.gpuGenerate(width,height,minx,maxx,miny,maxy,maxdepth,ps);
        }
        im.setRGB(0,0,width,height,ps,0,width);
        float dfx=(maxx - minx) * fx;
        float dfy=(maxy - miny) * fy;
        maxx-=dfx;
        minx+=dfx;
        maxy-=dfy;
        miny+=dfy;
        maxx+=dx;
        minx+=dx;
        maxy+=dy;
        miny+=dy;
        repaint();
        try {
          sleep(1);
        }
 catch (        InterruptedException ex) {
          Logger.getLogger(NewJPanel.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
    }
  }
.start();
}
