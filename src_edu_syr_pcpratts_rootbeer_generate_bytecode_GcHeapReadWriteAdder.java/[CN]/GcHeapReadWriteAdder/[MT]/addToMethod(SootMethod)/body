{
  if (mMethodsInspected.contains(method))   return;
  mMethodsInspected.add(method);
  SootClass soot_class=method.getDeclaringClass();
  soot_class=Scene.v().getSootClass(soot_class.getName());
  while (true) {
    mTypeHistory.addType(soot_class.getType());
    if (soot_class.hasSuperclass() == false)     break;
    soot_class=soot_class.getSuperclass();
    soot_class=Scene.v().getSootClass(soot_class.getName());
    if (soot_class.getName().equals("java.lang.Object"))     break;
  }
  Body body;
  try {
    body=method.getActiveBody();
  }
 catch (  RuntimeException ex) {
    return;
  }
  List<ValueBox> boxes=body.getUseAndDefBoxes();
  for (  ValueBox box : boxes) {
    Value v=box.getValue();
    if (v instanceof InvokeExpr) {
      InvokeExpr invoke_expr=(InvokeExpr)v;
      addToMethod(invoke_expr.getMethod());
    }
 else     if (v instanceof FieldRef) {
      FieldRef field_ref=(FieldRef)v;
      Type type=field_ref.getField().getType();
      if (type instanceof RefType) {
        mTypeHistory.addType(type);
      }
 else       if (type instanceof ArrayType) {
        mTypeHistory.addType(type);
      }
    }
  }
}
