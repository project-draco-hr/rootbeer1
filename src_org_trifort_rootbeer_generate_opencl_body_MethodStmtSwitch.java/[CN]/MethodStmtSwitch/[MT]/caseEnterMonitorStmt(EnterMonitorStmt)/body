{
  String id=getVarName();
  String mem=getVarName();
  String synch=getVarName();
  String count=getVarName();
  String old=getVarName();
  m_oldValueFromMonitorStack.push(old);
  OpenCLClass ocl_class=OpenCLScene.v().getOpenCLClass(m_sootMethod.getDeclaringClass());
  OpenCLMethod ocl_method=ocl_class.getMethod(m_sootMethod.getSignature());
  m_output.append("int " + id + " = getThreadId();\n");
  m_output.append("char * " + mem + " = org_trifort_gc_deref(");
  arg0.getOp().apply(m_valueSwitch);
  m_output.append(");\n");
  m_output.append("char * " + synch + " = org_trifort_gc_deref(");
  arg0.getOp().apply(m_valueSwitch);
  m_output.append(");\n");
  m_output.append(mem + " += 16;\n");
  m_output.append("int " + count + " = 0;\n");
  m_output.append("int " + old + ";\n");
  m_output.append("while(" + count + " < 100){\n");
  m_output.append("  " + old + " = atomicCAS((int *) "+ mem+ ", -1, "+ id+ ");\n");
  m_output.append("  if(" + old + " != -1 && "+ old+ " != "+ id+ "){\n");
  m_output.append("    " + count + "++;\n");
  m_output.append("    if(" + count + " >= 99){\n");
  m_output.append("      " + count + " = 0;\n");
  m_output.append("    }\n");
  m_output.append("  } else {\n");
  m_output.append("  * ( ( int * ) & " + synch + " [ 20 ] ) = 20 ;\n");
}
